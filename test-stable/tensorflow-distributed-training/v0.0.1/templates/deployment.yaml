apiVersion: "kubeflow.org/v1alpha1"
kind: "TFJob"
metadata:
  name: {{ template "tf-job.fullname" . }}
  labels:
    app: {{ template "tf-job.name" . }}
    chart: {{ template "tf-job.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicaSpecs:
    - replicas: "{{ .Values.master.number}}"
      tfReplicaType: MASTER
      template:
        spec:
          containers:
            - image: "{{ .Values.master.image.repository  }}:{{ .Values.master.image.tag }}"
              name: tensorflow
              volumeMounts:
                - mountPath: {{ .Values.persistent.path }}
                  name: nfs-pv-storage
              args: 
                - "--{{ .Values.exec.command }}""
          restartPolicy: OnFailure
          volumes:
          - name: nfs-pv-storage
          {{- if .Values.persistent.enable }}
            persistentVolumeClaim:
              claimName: {{ .Values.persistent.pvc }}
          {{- else }}
            emptyDir: {}
          {{ end }}
    - replicas: "{{ .Values.worker.number}}"
      tfReplicaType: WORKER
      template:
        spec:
          containers:
            - image: "{{ .Values.worker.image.repository }}:{{ .Values.worker.image.tag }}"
              name: tensorflow
              resources:
              limits:
                nvidia.com/gpu: {{ .Values.worker.gpunumber }}
              volumeMounts:
                - mountPath: {{ .Values.persistent.path }}
                  name: nfs-pv-storage
              args: 
                - "--{{ .Values.exec.command }}""
          restartPolicy: OnFailure
          volumes:
          - name: nfs-pv-storage
          {{- if .Values.persistent.enable }}
            persistentVolumeClaim:
              claimName: {{ .Values.persistent.pvc }}
          {{- else }}
            emptyDir: {}
          {{ end }}
    - replicas: "{{ .Values.ps.number}}"
      tfReplicaType: PS
      template:
        spec:
          containers:
            - image: "{{ .Values.ps.image.repository }}:{{ .Values.ps.image.tag }}"
              name: tensorflow
              volumeMounts:
                - mountPath: {{ .Values.persistent.path }}
                  name: nfs-pv-storage
              args: 
                - "--{{ .Values.exec.command }}"
          restartPolicy: OnFailure
          volumes:
          - name: nfs-pv-storage
          {{- if .Values.persistent.enable }}
            persistentVolumeClaim:
              claimName: {{ .Values.persistent.pvc }}
          {{- else }}
            emptyDir: {}
          {{ end }}
